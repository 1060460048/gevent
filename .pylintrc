[MESSAGES CONTROL]

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once).
# NOTE: comments must go between lines, not at the end; at the end of the line
# disables that directive and all following!
disable=wrong-import-position,
	wrong-import-order,
	missing-docstring,
	ungrouped-imports,
	# We get lots of these, especially in scripts. should fix many of them
	invalid-name,
	# We have many cases of this; legit ones need to be examinid and commented, then this removed
	protected-access,
	# common in superclasses with extension points
	no-self-use,
	# Exception and marker classes get tagged with this
	too-few-public-methods,
	# should tag individual instances with this, there are some but not too many
	exec-used,
	# should tag individual instances
	global-statement,
	# "from gevent import monkey; monkey.patch_all()"
	multiple-statements,
	# yes, we know we're doing this. don't replace one warning with another
	locally-disabled,
	# most of these are deferred imports
	cyclic-import,
	# these are almost always because that's what the stdlib does
	too-many-arguments,
	# likewise: these tend to be keyword arguments like len= in the stdlib
	redefined-builtin,

[FORMAT]
# duplicated from setup.cfg
max-line-length=160

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
#notes=FIXME,XXX,TODO
# Disable that, we don't want them in the report (???)
notes=

[VARIABLES]

dummy-variables-rgx=_.*

[TYPECHECK]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# gevent: this is helpful for py3/py2 code.
generated-members=exc_clear

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set). This supports can work
# with qualified names.
# greenlet, Greenlet, parent, dead: all attempts to fix issues in greenlet.py
# only seen on the service, e.g., self.parent.loop: class parent has no loop
ignored-classes=SSLContext, SSLSocket, greenlet, Greenlet, parent, dead

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=gevent._corecffi

[DESIGN]
max-attributes=10

[BASIC]
bad-functions=input
