diff -r -u libuv-v1.20.1/include/uv-unix.h libuv/include/uv-unix.h
--- libuv-v1.20.1/include/uv-unix.h	2018-04-18 08:18:43.000000000 -0500
+++ libuv/include/uv-unix.h	2018-04-20 12:16:19.000000000 -0500
@@ -207,8 +207,11 @@
   uv_handle_t* closing_handles;                                               \
   void* process_handles[2];                                                   \
   void* prepare_handles[2];                                                   \
+  void* prepare_handles_queue[2];                                                     \
   void* check_handles[2];                                                     \
+  void* check_handles_queue[2];                                                     \
   void* idle_handles[2];                                                      \
+  void* idle_handles_queue[2];                                                     \
   void* async_handles[2];                                                     \
   void (*async_unused)(void);  /* TODO(bnoordhuis) Remove in libuv v2. */     \
   uv__io_t async_io_watcher;                                                  \
diff -r -u libuv-v1.20.1/src/unix/loop-watcher.c libuv/src/unix/loop-watcher.c
--- libuv-v1.20.1/src/unix/loop-watcher.c	2018-04-18 08:18:43.000000000 -0500
+++ libuv/src/unix/loop-watcher.c	2018-04-20 13:59:36.000000000 -0500
@@ -22,6 +22,20 @@
 #include "uv.h"
 #include "internal.h"
 
+/*
+ * gevent: Fix for https://github.com/gevent/gevent/issues/1126
+ *
+ * Using a stack-based queue variable in uv__run_* badly breaks for
+ * certain stack manipulations when greenlets switch. Windows keeps
+ * the stack in the loop. We originally used malloc/free in uv__run_
+ * to avoid changing any files but this one, but that benchmarked
+ * fairly slow and widely variable across processes
+ * (https://groups.google.com/d/msg/libuv/8BxOk40Dii4/Ke1yotOQBwAJ) so
+ * we moved them to the loop. We can't use global static variables
+ * because of multiple threads.
+ */
+#include <stdlib.h>
+
 #define UV_LOOP_WATCHER_DEFINE(name, type)                                    \
   int uv_##name##_init(uv_loop_t* loop, uv_##name##_t* handle) {              \
     uv__handle_init(loop, (uv_handle_t*)handle, UV_##type);                   \
@@ -47,10 +61,10 @@
                                                                               \
   void uv__run_##name(uv_loop_t* loop) {                                      \
     uv_##name##_t* h;                                                         \
-    QUEUE queue;                                                              \
+    QUEUE* queue = &loop->name##_handles_queue;                               \
     QUEUE* q;                                                                 \
-    QUEUE_MOVE(&loop->name##_handles, &queue);                                \
-    while (!QUEUE_EMPTY(&queue)) {                                            \
+    QUEUE_MOVE(&loop->name##_handles, queue);                                 \
+    while (!QUEUE_EMPTY(queue)) {                                             \
       q = QUEUE_HEAD(&queue);                                                 \
       h = QUEUE_DATA(q, uv_##name##_t, queue);                                \
       QUEUE_REMOVE(q);                                                        \
